"""
Django settings for portal_finiquitos project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-7cb$#lx^)ja8phml(euccdb@reju=mmw8q3ch%)a1az)c*xdew"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

import os
from dotenv import load_dotenv

# Carga las variables de entorno del archivo .env
load_dotenv()

INSTALLED_APPS = [
    # Apps nativas de Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    # Apps del proyecto Portal Finiquitos
    "users",         # Gestión de usuarios y perfiles
    "employees",     # Datos maestros de trabajadores
    "settlements",   # Lógica y modelos de finiquitos
    "audit",         # Logs y trazabilidad de acciones
    "core",          # Utilidades y configuración global
    "warehouse",     # Almacén de datos

    # Autenticación social y API REST
    "django.contrib.sites",         # Requerido por allauth
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    "rest_framework_simplejwt",
]

# Configuración del ID del sitio (requerido por allauth)
SITE_ID = 1

# Permitir peticiones CORS desde localhost:5173 (por ejemplo, para Vite, React, etc.)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    ".grupoflesan.com"
]



MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "portal_finiquitos.urls"

# Configuración de autenticación y login social
AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",  # Login clásico
    "allauth.account.auth_backends.AuthenticationBackend",  # Login social
)

REST_USE_JWT = True  # Usar JWT para autenticación en APIs
ACCOUNT_EMAIL_VERIFICATION = "none"  # No requiere verificación de email
ACCOUNT_LOGIN_METHODS = {"username"}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
# Configuración específica para Google OAuth2
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

# Adapter personalizado para bloquear registro social automático
SOCIALACCOUNT_ADAPTER = 'users.adapters.NoNewUsersSocialAccountAdapter'


# Variables de entorno para credenciales de Google
SOCIAL_AUTH_GOOGLE_CLIENT_ID = os.getenv('SOCIAL_AUTH_GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_SECRET')

# Configuración de la base de datos PostgreSQL usando variables de entorno
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),              # Nombre de la base de datos principal
        'USER': os.getenv('DB_USER'),              # Usuario de la base de datos principal
        'PASSWORD': os.getenv('DB_PASSWORD'),      # Contraseña del usuario principal
        'HOST': os.getenv('DB_HOST'),              # Host de la base de datos principal
        'PORT': os.getenv('DB_PORT'),              # Puerto de la base de datos principal
        # Configuración del search_path para usar ambos esquemas
        'OPTIONS': {
            'options': '-c search_path=portal_finiquitos,seguridadapp,public'
        },
    },
    'datawarehouse': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME_DW'),           # Nombre de la base de datos del Data Warehouse
        'USER': os.getenv('DB_USER_DW'),           # Usuario del Data Warehouse
        'PASSWORD': os.getenv('DB_PASSWORD_DW'),   # Contraseña del usuario DW
        'HOST': os.getenv('DB_HOST_DW'),           # Host del Data Warehouse
        'PORT': os.getenv('DB_PORT_DW'),           # Puerto del Data Warehouse
        # Puedes agregar opciones específicas si tu DW lo requiere
        # 'OPTIONS': {},
    },
}

# Nota: El search_path permite que Django busque primero en el esquema portal_finiquitos, luego en seguridadapp y finalmente en public.

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "portal_finiquitos.wsgi.application"


# Database


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
